CC的UI

一、UI的分层

1、简单架构。用于小型项目
	由CCScene,CCLayer组成。
    一个scene的子结点可以由一个或多个layer组成。
	CCScene和CCLayer都可以响应操作事件。
	一般手动创建的Layer,事件在Layer中处理。使用定义文件的事件一般在Scene中处理。
	根据实际情况来选择。
2、mvc架构
   由CCScene,CCLayer组成,另外加入一个CCLayerController。
   事件主要由Controller处理。
   一个scene的子结点可以由一个或多个layer组成。
   scene不直接管理layer,而是直接管理controller。controller负责创建和处理layer的事件。controller管理的layer并加入scene中。
   通常一个controller直接管理一个layer。即一个layer属性。
   在这个架构中。一个scene有一个或多个子layer，即没有root layer。即有多个controller（间接引用的不算。被controller引用的）
   同时有多个controller，适合中大型项目。由于比较灵活，自然就比较复杂。
   实际使用的时候，通常有一个被缩放的layer,来适应不同的屏幕大小。一个简单的UI layer用来放置按钮，如果UI layer复杂则最好等比缩放。
   scene和layer只有和显示相关的逻辑，没有和游戏相关的逻辑。
	

3、类ios mvc的架构
   其中scene对应ios对应UIWindow,layer对应UIView.LayerController对应ViewController。所以
   一个scene由一个rootLayer，rootLayer包含其它layer。
   同样scene负责管理controller，controller负责创建layer和处理layer事件。controller管理的layer并加入scene中。
  这个架构中，scene只有一个root controller，责任比较明确。适合中小型的项目。

关于场景管理:
    SceneDirector负着管理场景和场景切换。对于架构2，SceneDirector直接管理CCScene，对于架构3。SceneDirector直接管理RootLayer。
     架构2可以使用cocos2dx自带的场景管理器，SceneDirector实现比较简单。架构3，实现类似cocos2dx，CCDirector的关于场景管理的功能。
     同时架构2可以使用cocos2dx的场景切换动画,架构3场景切换动画要自己实现。

  mobile系多使用View做为显示区的基础。比如苹果的uikit,与android的view包。ScrollView->View
  pc系多则少一层view的概念。像Panel,ScrollPane直接继承Cantianer。如java,flash。
  
二、目录结构
   主要目录结构
   Scenes			----	存放场景类.装配控制器，形成复杂界面
   Controllers		----	存放控制器.主要的显示交互逻辑。创建、操作Layer里的内容，接收Layer的事件。并调用Modle完成逻辑。
   Layers			----	存放层，主要用于显示。这里存放的东西不多，Layer主要从一些UI编辑器生成的文件构建而成。如(cocosbuild,cocosstudio)	
   Modles			----	游戏逻辑的主要处理地方。不要直接操作Layer里的东西，可以发送事件通知数据改变。
   Datas			----	游戏数据存放地。包括，持久化数据，内存数据。
   
View的组织方式：
	1、分离式
		一个View由几个部分组成，在controller里用代码把每个部分合并起来。
		灵活性低，由于使用硬代码适应性强。没办法做到所见即所得。
		适用中小型项目。
	2、组合式
		一个View由几个部分组成，使用描述文件来组合这些部分，最后builder生成组合后的View
		各方面都好，需要一个build系统和编辑器的支持。
		适用大中小型项目。
	3、一体式
		一个View只有一部分。
		重复元素多，灵活性差。
		只适用小型项目。
	
Scene的组织方式：   
	1、以Scene为主导
		使用cocos2d的director进行界面管理。
		每个界面一个Scene,Scene组织管理Contorller.
		Controller负责创建Layer，来完成显示功能。
		Controller不要使用继承，而是使用组合。使用继承可能会导致m_layer乱用。
   
	2、以Layer为主
		自己进行界面管理。
		整个游戏期间只使用一个Scene(特殊情况下可以使用多个，但Scene只做容器)，Scene基本没有逻辑，通常创建几个Layer，比如Dialog层，这层专门放置对话框，其zIndex值比别的高。
    	某些时候Controller可以使用继承，但尽量少用，而是使用view的组合方式，即使用builder。
	
	总结：由于要避免使用Controller的继承，以layer为主的模式中，只有使用组合式的View才是最佳的选择。
	